// Code generated by protoc-gen-go. DO NOT EDIT.
// source: personaapp.proto

package personaappapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("personaapp.proto", fileDescriptor_a6083bb8799e537c) }

var fileDescriptor_a6083bb8799e537c = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x15, 0x71, 0x95, 0x81, 0x8a, 0xe4, 0xe0, 0xa1, 0xba, 0xab, 0xa2, 0x07, 0x4f, 0x3d,
	0xe8, 0x13, 0x6c, 0x45, 0x14, 0xdc, 0x43, 0x2d, 0x78, 0xf1, 0x16, 0x75, 0x6c, 0x0b, 0x9a, 0x19,
	0x9b, 0xc9, 0xc1, 0x87, 0xf5, 0x5d, 0xc4, 0x26, 0xa1, 0x6e, 0xdd, 0xee, 0x31, 0xff, 0xf7, 0xcf,
	0x47, 0x48, 0x06, 0xf6, 0x19, 0x5b, 0x4b, 0x46, 0x6b, 0xe6, 0x8c, 0x5b, 0x12, 0x52, 0x49, 0x9f,
	0x68, 0x6e, 0x52, 0xd0, 0x4e, 0x6a, 0x8f, 0xd2, 0xe4, 0x85, 0x3e, 0x58, 0x9b, 0x2f, 0x7f, 0xbc,
	0xfc, 0xde, 0x02, 0x28, 0x7c, 0x79, 0xce, 0xac, 0xee, 0x61, 0xb7, 0xc4, 0xaa, 0xb1, 0x82, 0xad,
	0x9a, 0x65, 0x4b, 0x96, 0x2c, 0x82, 0x12, 0x3f, 0x1d, 0x5a, 0x49, 0x8f, 0x47, 0xb9, 0x65, 0x32,
	0x16, 0x55, 0x0e, 0xdb, 0x0b, 0xaa, 0x1a, 0xa3, 0x0e, 0x07, 0xcd, 0x2e, 0x8d, 0x9a, 0xa3, 0xd5,
	0x30, 0x38, 0x6e, 0x60, 0xb2, 0xa0, 0x8a, 0x9c, 0xa8, 0x15, 0x3d, 0x72, 0x12, 0x2d, 0xd3, 0x11,
	0x1a, 0x34, 0x77, 0xb0, 0x53, 0xe2, 0x5b, 0x8b, 0xb6, 0x56, 0xd3, 0x7f, 0xd7, 0xee, 0xf2, 0x28,
	0x9a, 0x8d, 0xe1, 0x60, 0x7a, 0x82, 0xe4, 0x91, 0x5f, 0xb5, 0xe0, 0xb5, 0x7f, 0x47, 0x75, 0x36,
	0x18, 0x58, 0xa2, 0xd1, 0x7a, 0xbe, 0xbe, 0x14, 0xdc, 0x0f, 0x00, 0xb7, 0x28, 0x51, 0x7c, 0x32,
	0x98, 0xe9, 0x51, 0xb4, 0x9e, 0xae, 0x69, 0x78, 0x65, 0x7e, 0x01, 0x07, 0x64, 0xde, 0x1b, 0x83,
	0x7f, 0xaa, 0xd9, 0xef, 0x3a, 0xe4, 0x7b, 0xfd, 0xb7, 0xcf, 0x9d, 0xd4, 0xc5, 0x46, 0xb1, 0xf9,
	0x3c, 0xe9, 0x96, 0xe2, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0x76, 0xca, 0x43, 0xda, 0x52, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PersonaAppClient is the client API for PersonaApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersonaAppClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*UpdateCompanyResponse, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error)
}

type personaAppClient struct {
	cc *grpc.ClientConn
}

func NewPersonaAppClient(cc *grpc.ClientConn) PersonaAppClient {
	return &personaAppClient{cc}
}

func (c *personaAppClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaAppClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaAppClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaAppClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaAppClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*UpdateCompanyResponse, error) {
	out := new(UpdateCompanyResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personaAppClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, "/personaappapi.PersonaApp/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonaAppServer is the server API for PersonaApp service.
type PersonaAppServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*UpdateCompanyResponse, error)
	GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error)
}

// UnimplementedPersonaAppServer can be embedded to have forward compatible implementations.
type UnimplementedPersonaAppServer struct {
}

func (*UnimplementedPersonaAppServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedPersonaAppServer) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedPersonaAppServer) Logout(ctx context.Context, req *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedPersonaAppServer) Refresh(ctx context.Context, req *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedPersonaAppServer) UpdateCompany(ctx context.Context, req *UpdateCompanyRequest) (*UpdateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (*UnimplementedPersonaAppServer) GetCompany(ctx context.Context, req *GetCompanyRequest) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}

func RegisterPersonaAppServer(s *grpc.Server, srv PersonaAppServer) {
	s.RegisterService(&_PersonaApp_serviceDesc, srv)
}

func _PersonaApp_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaApp_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaApp_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaApp_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaApp_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonaApp_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonaAppServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personaappapi.PersonaApp/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonaAppServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersonaApp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personaappapi.PersonaApp",
	HandlerType: (*PersonaAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PersonaApp_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PersonaApp_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PersonaApp_Logout_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PersonaApp_Refresh_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _PersonaApp_UpdateCompany_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _PersonaApp_GetCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personaapp.proto",
}
